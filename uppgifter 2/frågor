# 1.Vilken filändelse bör du alltid ge ett Pythonprogram som du sparar?

# Man bör alltid lägga till filändelsen .py för att kunna köra programmet från kommandorad eller terminalfönster, annars fungerar det inte.

# ------------------------------------------------------------------------------------------------

# 2.Vad är variabler i Python? Ge exempel.

# I programmering använder man sig av variabler, vilka kan stå för något tilldelat värde, inte helt olikt som vi använder variabler i matematiken. Variabler i programmering bör man dock tänka på som att de refererar till någonting i datorns minne. De står för något värde som de är namn på Man tilldelar variabler värde, alltså knyter namnet till något i minnet med hjälp av ett likhetstecken. Exempelvis:

# a = 10, b = 3, a + b, pris = 37.50, antal = 10, osv.

# ------------------------------------------------------------------------------------------------

# 3. Vad är det för fel med att skriva
# if  a = 5:
    # print('a är fem')

# Användningen av enda likhetstecken (=) i stället för jämförelseoperator (==).

# I Python används == för att jämföra värden, medan = används för att tilldela värden åt variabler. Det är viktigt att ha rätt syntax för att undvika syntaxfel och för att programmet ska fungera korrekt.

# ------------------------------------------------------------------------------------------------

# 4. Vilka jämförelseoperatorer finns i Python? Ge exempel på några booleska uttryck.

# likhet (==): 
# x = 5
# y = 3
# print(x == y)  # False

# olikhet (!=): 
# a = 10
# b = 10
# print(a != b)  # False

# Större än (>)
# m = 7
# n = 4
# print(m > n)  # True

# Mindre än (<)
# p = 3
# q = 6
# print(p < q)  # True
 
# Större eller lika med (>=)

# r = 5
# s = 5
# print(r >= s)  # True

# Mindre eller lika med (<=)

# t = 8
# u = 10
# print(t <= u)  # True

# ------------------------------------------------------------------------------------------------

# 5. Vilka Booleska (logiska) operatorer finns i Python? Ge exempel.

# I Python finns det tre grundläggande booleska (logiska) operatorer: and, or och not. Dessa används för att kombinera eller ändra logiska uttryck. Här är några exempel:

# And 
# x = True
# y = False
# result = x and y
# print(result)  # False

# Or

# a = True
# b = False
# result = a or b
# print(result)  # True

# Not
# p = True
# result = not p
# print(result)  # False

# Dessa operatorer används för att bygga mer komplexa booleska uttryck och kombinera logiska villkor. Här är ett exempel med alla tre operatorerna:

# m = True
# n = False
# o = True

# result = m and (n or not o)
# print(result)  # False
